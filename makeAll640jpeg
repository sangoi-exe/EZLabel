import os
import tkinter as tk
from tkinter import filedialog
from PIL import Image
from concurrent.futures import ThreadPoolExecutor

# Import tqdm for progress bar; if not available, define a simple fallback.
try:
    from tqdm import tqdm
except ImportError:

    class tqdm:
        def __init__(self, iterable, total=None, desc="", unit=""):
            self.iterable = iterable
            self.total = total if total is not None else len(iterable)
            self.desc = desc
            self.unit = unit
            self.count = 0

        def __iter__(self):
            for item in self.iterable:
                yield item
                self.count += 1
                print(f"{self.desc}: {self.count}/{self.total}", end="\r")
            print("")

        def update(self, n=1):
            self.count += n


def process_image(image_path, output_folder):
    """Convert image to JPEG, resize to 640x640, and save to output folder with quality=100."""
    try:
        # Open and convert image to RGB
        img = Image.open(image_path).convert("RGB")
        # Resize image to 640x640 (ignoring aspect ratio)
        img = img.resize((640, 640))
        # Build output file path using the selected output folder
        base_name = os.path.splitext(os.path.basename(image_path))[0]
        output_path = os.path.join(output_folder, f"{base_name}.jpg")
        # Save as JPEG with quality=100 and optimization enabled
        img.save(output_path, "JPEG", quality=100, optimize=True)
        return True
    except Exception:
        return False


def main():
    """Select input folder, output folder, number of workers, process images concurrently, and display progress."""
    # Tkinter setup with topmost attribute
    root = tk.Tk()
    root.attributes("-topmost", True)
    root.withdraw()

    # Prompt user to select a folder containing images
    folder_selected = filedialog.askdirectory(title="Select a folder containing images")
    if not folder_selected:
        print("No folder selected. Exiting...")
        return

    # Prompt user to select a folder to save converted images
    output_folder = filedialog.askdirectory(title="Select a folder to save converted images")
    if not output_folder:
        print("No output folder selected. Exiting...")
        return

    # Prompt user for the number of worker threads
    workers = 16
    if not workers:
        print("No number of workers selected. Exiting...")
        return

    # Gather paths for valid image files
    valid_extensions = (".png", ".jpg", ".jpeg")
    image_paths = [os.path.join(folder_selected, f) for f in os.listdir(folder_selected) if f.lower().endswith(valid_extensions)]
    if not image_paths:
        print("No valid images found in the selected folder.")
        return

    print("Processing images...")
    # Process images concurrently using ThreadPoolExecutor with user-defined max_workers
    with ThreadPoolExecutor(max_workers=workers) as executor:
        list(
            tqdm(
                executor.map(lambda p: process_image(p, output_folder), image_paths),
                total=len(image_paths),
                desc="Converting & Resizing",
                unit="img",
            )
        )

    print("All images processed successfully.")


if __name__ == "__main__":
    main()
